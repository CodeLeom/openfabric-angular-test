{"ast":null,"code":"import { Subject, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AppServiceService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:3005';\n    this._refreshrequired = new Subject();\n  }\n  get RefreshRequired() {\n    return this._refreshrequired;\n  }\n  getLocalData() {\n    const data = localStorage.getItem('user_data');\n    if (data) {\n      return JSON.parse(data);\n    }\n  }\n  // User service \n  userlogin(email, password) {\n    return this.http.post(`${this.baseUrl}/api/users/login`, {\n      email,\n      password\n    });\n  }\n  userRegistration(name, email, password) {\n    return this.http.post(`${this.baseUrl}/api/users`, {\n      name,\n      email,\n      password\n    });\n  }\n  // products service \n  postProduct(name, price, description) {\n    return this.http.post(`${this.baseUrl}/api/products`, {\n      name,\n      price,\n      description\n    }).pipe(tap(() => {\n      this.RefreshRequired.next();\n    }));\n  }\n  deleteProduct(id) {\n    return this.http.delete(`${this.baseUrl}/api/products/${id}`).pipe(tap(() => {\n      this.RefreshRequired.next();\n    }));\n  }\n  editProduct(id, name, price, description) {\n    return this.http.put(`${this.baseUrl}/api/products/${id}`, {\n      name,\n      price,\n      description\n    });\n  }\n  getSingleProduct(id) {\n    return this.http.get(`${this.baseUrl}/api/products/${id}`);\n  }\n  getAllProducts() {\n    return this.http.get(`${this.baseUrl}/api/products`);\n  }\n}\nAppServiceService.ɵfac = function AppServiceService_Factory(t) {\n  return new (t || AppServiceService)(i0.ɵɵinject(i1.HttpClient));\n};\nAppServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AppServiceService,\n  factory: AppServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,OAAO,EAAEC,GAAG,QAAQ,MAAM;;;AAK/C,OAAM,MAAOC,iBAAiB;EAG5BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IADhB,YAAO,GAAG,uBAAuB;IAGjC,qBAAgB,GAAG,IAAIJ,OAAO,EAAQ;EAFN;EAIxC,IAAIK,eAAe;IACjB,OAAO,IAAI,CAACC,gBAAgB;EAC9B;EAEAC,YAAY;IACV,MAAMC,IAAI,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IAC9C,IAAGF,IAAI,EAAC;MACN,OAAOG,IAAI,CAACC,KAAK,CAACJ,IAAI,CAAC;;EAE3B;EAEA;EACAK,SAAS,CAACC,KAAa,EAAEC,QAAgB;IACvC,OAAO,IAAI,CAACX,IAAI,CAACY,IAAI,CAAC,GAAG,IAAI,CAACC,OAAO,kBAAkB,EAAE;MACvDH,KAAK;MACLC;KACD,CAAC;EACJ;EAEAG,gBAAgB,CAACC,IAAY,EAAEL,KAAa,EAAEC,QAAgB;IAC5D,OAAO,IAAI,CAACX,IAAI,CAACY,IAAI,CAAC,GAAG,IAAI,CAACC,OAAO,YAAY,EAAE;MACjDE,IAAI;MACJL,KAAK;MACLC;KACD,CAAC;EACJ;EAEA;EACAK,WAAW,CAACD,IAAY,EAAEE,KAAa,EAAEC,WAAmB;IAC1D,OAAO,IAAI,CAAClB,IAAI,CAACY,IAAI,CAAC,GAAG,IAAI,CAACC,OAAO,eAAe,EAAE;MACpDE,IAAI;MACJE,KAAK;MACLC;KACD,CAAC,CACDC,IAAI,CAACtB,GAAG,CAAC,MAAK;MACb,IAAI,CAACI,eAAe,CAACmB,IAAI,EAAE;IAC7B,CAAC,CAAC,CAAC;EACL;EAEAC,aAAa,CAACC,EAAU;IACtB,OAAO,IAAI,CAACtB,IAAI,CAACuB,MAAM,CAAC,GAAG,IAAI,CAACV,OAAO,iBAAiBS,EAAE,EAAE,CAAC,CAC5DH,IAAI,CAACtB,GAAG,CAAC,MAAK;MACb,IAAI,CAACI,eAAe,CAACmB,IAAI,EAAE;IAC7B,CAAC,CAAC,CAAC;EACL;EAEAI,WAAW,CAACF,EAAU,EAAEP,IAAY,EAAEE,KAAa,EAAEC,WAAmB;IACtE,OAAO,IAAI,CAAClB,IAAI,CAACyB,GAAG,CAAC,GAAG,IAAI,CAACZ,OAAO,iBAAiBS,EAAE,EAAE,EAAE;MACzDP,IAAI;MACJE,KAAK;MACLC;KACD,CAAC;EACJ;EAEAQ,gBAAgB,CAACJ,EAAU;IACzB,OAAO,IAAI,CAACtB,IAAI,CAAC2B,GAAG,CAAC,GAAG,IAAI,CAACd,OAAO,iBAAiBS,EAAE,EAAE,CAAC;EAC5D;EAEAM,cAAc;IACZ,OAAO,IAAI,CAAC5B,IAAI,CAAC2B,GAAG,CAAC,GAAG,IAAI,CAACd,OAAO,eAAe,CAAC;EACtD;;AAnEWf,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;SAAjBA,iBAAiB;EAAA+B,SAAjB/B,iBAAiB;EAAAgC,YAFhB;AAAM","names":["Subject","tap","AppServiceService","constructor","http","RefreshRequired","_refreshrequired","getLocalData","data","localStorage","getItem","JSON","parse","userlogin","email","password","post","baseUrl","userRegistration","name","postProduct","price","description","pipe","next","deleteProduct","id","delete","editProduct","put","getSingleProduct","get","getAllProducts","factory","providedIn"],"sourceRoot":"","sources":["/Users/leom/Desktop/openfabric-angular-test/frontend/src/app/service/app-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, Subject, tap } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppServiceService {\n \n  private baseUrl = 'http://localhost:3005';\n  constructor(private http: HttpClient) { }\n\n  private _refreshrequired = new Subject<void>()\n\n  get RefreshRequired(){\n    return this._refreshrequired;\n  }\n\n  getLocalData(){\n    const data = localStorage.getItem('user_data');\n    if(data){\n      return JSON.parse(data)\n    }\n  }\n\n  // User service \n  userlogin(email: string, password: string){\n    return this.http.post(`${this.baseUrl}/api/users/login`, {\n      email,\n      password\n    })\n  };\n\n  userRegistration(name: string, email: string, password: string){\n    return this.http.post(`${this.baseUrl}/api/users`, {\n      name,\n      email,\n      password\n    })\n  }\n\n  // products service \n  postProduct(name: string, price: number, description: string){\n    return this.http.post(`${this.baseUrl}/api/products`, {\n      name,\n      price,\n      description\n    })\n    .pipe(tap(() => {\n      this.RefreshRequired.next();\n    }))\n  }\n\n  deleteProduct(id: string){\n    return this.http.delete(`${this.baseUrl}/api/products/${id}`)\n    .pipe(tap(() => {\n      this.RefreshRequired.next();\n    }))\n  }\n\n  editProduct(id: string, name: string, price: number, description: string){\n    return this.http.put(`${this.baseUrl}/api/products/${id}`, {\n      name,\n      price,\n      description\n    })\n  }\n\n  getSingleProduct(id: string){\n    return this.http.get(`${this.baseUrl}/api/products/${id}`)\n  }\n\n  getAllProducts(): Observable<any>{\n    return this.http.get(`${this.baseUrl}/api/products`)\n  }\n\n\n\n\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}