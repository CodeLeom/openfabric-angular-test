{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class AppServiceService {}\nAppServiceService.ɵfac = function AppServiceService_Factory(t) {\n  return new (t || AppServiceService)();\n};\nAppServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AppServiceService,\n  factory: AppServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAMA,OAAM,MAAOA,iBAAiB;AAAjBA,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;SAAjBA,iBAAiB;EAAAC,SAAjBD,iBAAiB;EAAAE,YAFhB;AAAM","names":["AppServiceService","factory","providedIn"],"sourceRoot":"","sources":["/Users/leom/Desktop/openfabric-angular-test/frontend/src/app/service/app-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppServiceService implements {\n  data: any\n  private baseUrl = \"https://openfabric-backend.onrender.com\"\n  constructor(private http: HttpClient) { }\n\n  httpsOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n    })\n  }\n\n\n  // User service \n  userlogin(email: string, password: string){\n    return this.http.post(`${this.baseUrl}/api/users/login`, {\n      email,\n      password\n    })\n  };\n\n  userRegistration(name: string, email: string, password: string){\n    return this.http.post(`${this.baseUrl}/api/users`, {\n      name,\n      email,\n      password\n    })\n  }\n\n  // products service \n  postProduct(name: string, description: string){\n    return this.http.post(`${this.baseUrl}/api/products`, {\n      name,\n      description\n    })\n  }\n\n  deleteProduct(id: string){\n    return this.http.delete(`${this.baseUrl}/api/products/${id}`)\n  }\n\n  editProduct(id: string, name: string, description: string){\n    return this.http.put(`${this.baseUrl}/api/products/${id}`, {\n      name,\n      description\n    })\n  }\n\n  getSingleProduct(id: string){\n    return this.http.get(`${this.baseUrl}/api/products/:id`)\n  }\n\n  getAllProducts(token: string){\n    this.httpsOptions.headers.append('Authorization',`Bearer ${token}`)\n    return this.http.get(`${this.baseUrl}/api/products`, this.httpsOptions);\n  }\n\n\n\n\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}