{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Directive, Input, NgModule, createComponent, TemplateRef, Component, InjectionToken, inject, Injector, ApplicationRef, EnvironmentInjector } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nclass TeleportService {\n  constructor() {\n    this.outlets = new BehaviorSubject('');\n    this.asObservable = this.outlets.asObservable();\n    this.ports = new Map();\n  }\n  outlet$(name) {\n    return this.asObservable.pipe(filter(current => current === name), map(name => this.ports.get(name)));\n  }\n  newOutlet(name) {\n    this.outlets.next(name);\n  }\n}\nTeleportService.ɵfac = function TeleportService_Factory(t) {\n  return new (t || TeleportService)();\n};\nTeleportService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: TeleportService,\n  factory: TeleportService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TeleportService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nclass TeleportOutletDirective {\n  constructor(vcr, service) {\n    this.vcr = vcr;\n    this.service = service;\n  }\n  ngOnChanges(changes) {\n    // The `teleportOutlet` might be `null|undefined`, but we don't want nullable values to be used\n    // as keys for the `ports` map.\n    if (changes.teleportOutlet && typeof this.teleportOutlet === 'string') {\n      this.service.ports.set(this.teleportOutlet, this.vcr);\n      this.service.newOutlet(this.teleportOutlet);\n    }\n  }\n  ngOnDestroy() {\n    this.service.ports.delete(this.teleportOutlet);\n  }\n}\nTeleportOutletDirective.ɵfac = function TeleportOutletDirective_Factory(t) {\n  return new (t || TeleportOutletDirective)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(TeleportService));\n};\nTeleportOutletDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TeleportOutletDirective,\n  selectors: [[\"\", \"teleportOutlet\", \"\"]],\n  inputs: {\n    teleportOutlet: \"teleportOutlet\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TeleportOutletDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[teleportOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ViewContainerRef\n    }, {\n      type: TeleportService\n    }];\n  }, {\n    teleportOutlet: [{\n      type: Input\n    }]\n  });\n})();\nclass TeleportDirective {\n  constructor(tpl, service) {\n    this.tpl = tpl;\n    this.service = service;\n    this.subscription = null;\n  }\n  ngOnChanges(changes) {\n    if (changes.teleportTo && typeof this.teleportTo === 'string') {\n      this.dispose();\n      this.subscription = this.service.outlet$(this.teleportTo).subscribe(outlet => {\n        if (outlet) {\n          this.viewRef = outlet.createEmbeddedView(this.tpl);\n        }\n      });\n    }\n  }\n  ngOnDestroy() {\n    this.dispose();\n  }\n  dispose() {\n    this.subscription?.unsubscribe();\n    this.subscription = null;\n    this.viewRef?.destroy();\n  }\n}\nTeleportDirective.ɵfac = function TeleportDirective_Factory(t) {\n  return new (t || TeleportDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(TeleportService));\n};\nTeleportDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TeleportDirective,\n  selectors: [[\"\", \"teleportTo\", \"\"]],\n  inputs: {\n    teleportTo: \"teleportTo\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TeleportDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[teleportTo]'\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }, {\n      type: TeleportService\n    }];\n  }, {\n    teleportTo: [{\n      type: Input\n    }]\n  });\n})();\nclass TeleportModule {}\nTeleportModule.ɵfac = function TeleportModule_Factory(t) {\n  return new (t || TeleportModule)();\n};\nTeleportModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: TeleportModule\n});\nTeleportModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TeleportModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [TeleportDirective, TeleportOutletDirective],\n      exports: [TeleportDirective, TeleportOutletDirective]\n    }]\n  }], null, null);\n})();\nclass CompRef {\n  constructor(options) {\n    this.options = options;\n    if (options.vcr) {\n      this.ref = options.vcr.createComponent(options.component, {\n        index: options.vcr.length,\n        injector: options.injector || options.vcr.injector\n      });\n    } else {\n      this.ref = createComponent(options.component, {\n        elementInjector: options.injector,\n        environmentInjector: options.environmentInjector\n      });\n      options.appRef.attachView(this.ref.hostView);\n    }\n  }\n  setInput(input, value) {\n    this.ref.instance[input] = value;\n    return this;\n  }\n  setInputs(inputs) {\n    Object.keys(inputs).forEach(input => {\n      this.ref.instance[input] = inputs[input];\n    });\n    return this;\n  }\n  detectChanges() {\n    this.ref.hostView.detectChanges();\n    return this;\n  }\n  appendTo(container) {\n    container.appendChild(this.getElement());\n    return this;\n  }\n  removeFrom(container) {\n    container.removeChild(this.getElement());\n    return this;\n  }\n  getRawContent() {\n    return this.getElement().outerHTML;\n  }\n  getElement() {\n    return this.ref.location.nativeElement;\n  }\n  destroy() {\n    this.ref.destroy();\n    !this.options.vcr && this.options.appRef.detachView(this.ref.hostView);\n    this.ref = null;\n  }\n}\nfunction isTemplateRef(value) {\n  return value instanceof TemplateRef;\n}\nfunction isComponent(value) {\n  return typeof value === 'function';\n}\nfunction isString(value) {\n  return typeof value === 'string';\n}\nfunction getViewRef(value) {\n  return value instanceof CompRef ? value.ref.hostView : value.ref;\n}\nclass DynamicViewComponent {}\nDynamicViewComponent.ɵfac = function DynamicViewComponent_Factory(t) {\n  return new (t || DynamicViewComponent)();\n};\nDynamicViewComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: DynamicViewComponent,\n  selectors: [[\"dynamic-view\"]],\n  inputs: {\n    content: \"content\"\n  },\n  decls: 1,\n  vars: 1,\n  consts: [[3, \"innerHTML\"]],\n  template: function DynamicViewComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"innerHTML\", ctx.content, i0.ɵɵsanitizeHtml);\n    }\n  },\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DynamicViewComponent, [{\n    type: Component,\n    args: [{\n      selector: 'dynamic-view',\n      template: ` <div [innerHTML]=\"content\"></div> `\n    }]\n  }], null, {\n    content: [{\n      type: Input\n    }]\n  });\n})();\nclass TplRef {\n  constructor(args) {\n    this.args = args;\n    if (this.args.vcr) {\n      this.ref = this.args.vcr.createEmbeddedView(this.args.tpl, this.args.context || {}, {\n        injector: args.injector\n      });\n      this.ref.detectChanges();\n    } else {\n      this.ref = this.args.tpl.createEmbeddedView(this.args.context || {}, args.injector);\n      this.ref.detectChanges();\n      this.args.appRef.attachView(this.ref);\n    }\n  }\n  detectChanges() {\n    this.ref.detectChanges();\n  }\n  getElement() {\n    const rootNodes = this.ref.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0] === Node.ELEMENT_NODE) {\n      this.element = rootNodes[0];\n    } else {\n      this.element = document.createElement('div');\n      this.element.append(...rootNodes);\n    }\n    return this.element;\n  }\n  destroy() {\n    if (this.ref.rootNodes[0] !== 1) {\n      this.element?.parentNode.removeChild(this.element);\n      this.element = null;\n    }\n    if (!this.args.vcr) {\n      this.args.appRef.detachView(this.ref);\n    }\n    this.ref.destroy();\n    this.ref = null;\n  }\n}\nclass StringRef {\n  constructor(value) {\n    this.value = value;\n  }\n  getElement() {\n    return this.value;\n  }\n  detectChanges() {}\n  destroy() {}\n}\nconst VIEW_CONTEXT = new InjectionToken('Component context');\nclass ViewService {\n  constructor() {\n    this.injector = inject(Injector);\n    this.appRef = inject(ApplicationRef);\n    this.environmentInjector = inject(EnvironmentInjector);\n  }\n  createComponent(component, options = {}) {\n    let injector = options.injector || this.injector;\n    if (options.context) {\n      injector = Injector.create({\n        providers: [{\n          provide: VIEW_CONTEXT,\n          useValue: options.context\n        }],\n        parent: injector\n      });\n    }\n    return new CompRef({\n      component,\n      vcr: options.vcr,\n      injector,\n      appRef: this.appRef,\n      environmentInjector: options.environmentInjector || this.environmentInjector\n    });\n  }\n  createTemplate(tpl, options = {}) {\n    return new TplRef({\n      vcr: options.vcr,\n      appRef: this.appRef,\n      tpl,\n      context: options.context,\n      injector: options.injector\n    });\n  }\n  createView(content, viewOptions = {}) {\n    if (isTemplateRef(content)) {\n      return this.createTemplate(content, viewOptions);\n    } else if (isComponent(content)) {\n      return this.createComponent(content, viewOptions);\n    } else if (isString(content)) {\n      return new StringRef(content);\n    } else {\n      throw 'Type of content is not supported';\n    }\n  }\n}\nViewService.ɵfac = function ViewService_Factory(t) {\n  return new (t || ViewService)();\n};\nViewService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ViewService,\n  factory: ViewService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ViewService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nfunction injectViewContext() {\n  return inject(VIEW_CONTEXT);\n}\nclass DynamicViewDirective {\n  constructor(defaultTpl, vcr, viewService) {\n    this.defaultTpl = defaultTpl;\n    this.vcr = vcr;\n    this.viewService = viewService;\n  }\n  ngOnInit() {\n    this.resolveContentType();\n  }\n  ngOnChanges(changes) {\n    if (changes.view && !changes.view.isFirstChange()) {\n      this.resolveContentType();\n    }\n  }\n  resolveContentType() {\n    this.viewRef?.destroy();\n    if (isString(this.view)) {\n      this.viewRef = this.viewService.createComponent(DynamicViewComponent, {\n        vcr: this.vcr,\n        injector: this.injector\n      });\n      this.viewRef.setInput('content', this.view).detectChanges();\n    } else {\n      this.viewRef = this.viewService.createView(this.view || this.defaultTpl, {\n        vcr: this.vcr,\n        injector: this.injector ?? this.vcr.injector,\n        context: this.context\n      });\n    }\n  }\n  ngOnDestroy() {\n    this.viewRef?.destroy();\n  }\n}\nDynamicViewDirective.ɵfac = function DynamicViewDirective_Factory(t) {\n  return new (t || DynamicViewDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(ViewService));\n};\nDynamicViewDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: DynamicViewDirective,\n  selectors: [[\"\", \"dynamicView\", \"\"]],\n  inputs: {\n    view: [\"dynamicView\", \"view\"],\n    injector: [\"dynamicViewInjector\", \"injector\"],\n    context: [\"dynamicViewContext\", \"context\"]\n  },\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DynamicViewDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[dynamicView]'\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: ViewService\n    }];\n  }, {\n    view: [{\n      type: Input,\n      args: ['dynamicView']\n    }],\n    injector: [{\n      type: Input,\n      args: ['dynamicViewInjector']\n    }],\n    context: [{\n      type: Input,\n      args: ['dynamicViewContext']\n    }]\n  });\n})();\nclass DynamicViewModule {}\nDynamicViewModule.ɵfac = function DynamicViewModule_Factory(t) {\n  return new (t || DynamicViewModule)();\n};\nDynamicViewModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: DynamicViewModule\n});\nDynamicViewModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DynamicViewModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [DynamicViewDirective, DynamicViewComponent],\n      exports: [DynamicViewDirective]\n    }]\n  }], null, null);\n})();\n\n/*\n * Public API Surface of overview\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CompRef, DynamicViewDirective, DynamicViewModule, StringRef, TeleportDirective, TeleportModule, TeleportOutletDirective, TplRef, ViewService, getViewRef, injectViewContext, isComponent, isString, isTemplateRef };","map":{"version":3,"names":["i0","Injectable","Directive","Input","NgModule","createComponent","TemplateRef","Component","InjectionToken","inject","Injector","ApplicationRef","EnvironmentInjector","BehaviorSubject","filter","map","TeleportService","constructor","outlets","asObservable","ports","Map","outlet$","name","pipe","current","get","newOutlet","next","ɵfac","ɵprov","type","args","providedIn","TeleportOutletDirective","vcr","service","ngOnChanges","changes","teleportOutlet","set","ngOnDestroy","delete","ViewContainerRef","ɵdir","selector","TeleportDirective","tpl","subscription","teleportTo","dispose","subscribe","outlet","viewRef","createEmbeddedView","unsubscribe","destroy","TeleportModule","ɵmod","ɵinj","declarations","exports","CompRef","options","ref","component","index","length","injector","elementInjector","environmentInjector","appRef","attachView","hostView","setInput","input","value","instance","setInputs","inputs","Object","keys","forEach","detectChanges","appendTo","container","appendChild","getElement","removeFrom","removeChild","getRawContent","outerHTML","location","nativeElement","detachView","isTemplateRef","isComponent","isString","getViewRef","DynamicViewComponent","ɵcmp","template","content","TplRef","context","rootNodes","Node","ELEMENT_NODE","element","document","createElement","append","parentNode","StringRef","VIEW_CONTEXT","ViewService","create","providers","provide","useValue","parent","createTemplate","createView","viewOptions","injectViewContext","DynamicViewDirective","defaultTpl","viewService","ngOnInit","resolveContentType","view","isFirstChange","DynamicViewModule"],"sources":["/Users/leom/Desktop/openfabric-angular-test/frontend/node_modules/@ngneat/overview/fesm2020/ngneat-overview.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, Directive, Input, NgModule, createComponent, TemplateRef, Component, InjectionToken, inject, Injector, ApplicationRef, EnvironmentInjector } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nclass TeleportService {\n    constructor() {\n        this.outlets = new BehaviorSubject('');\n        this.asObservable = this.outlets.asObservable();\n        this.ports = new Map();\n    }\n    outlet$(name) {\n        return this.asObservable.pipe(filter(current => current === name), map(name => this.ports.get(name)));\n    }\n    newOutlet(name) {\n        this.outlets.next(name);\n    }\n}\nTeleportService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.1\", ngImport: i0, type: TeleportService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nTeleportService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.1.1\", ngImport: i0, type: TeleportService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.1\", ngImport: i0, type: TeleportService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }] });\n\nclass TeleportOutletDirective {\n    constructor(vcr, service) {\n        this.vcr = vcr;\n        this.service = service;\n    }\n    ngOnChanges(changes) {\n        // The `teleportOutlet` might be `null|undefined`, but we don't want nullable values to be used\n        // as keys for the `ports` map.\n        if (changes.teleportOutlet && typeof this.teleportOutlet === 'string') {\n            this.service.ports.set(this.teleportOutlet, this.vcr);\n            this.service.newOutlet(this.teleportOutlet);\n        }\n    }\n    ngOnDestroy() {\n        this.service.ports.delete(this.teleportOutlet);\n    }\n}\nTeleportOutletDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.1\", ngImport: i0, type: TeleportOutletDirective, deps: [{ token: i0.ViewContainerRef }, { token: TeleportService }], target: i0.ɵɵFactoryTarget.Directive });\nTeleportOutletDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.1.1\", type: TeleportOutletDirective, selector: \"[teleportOutlet]\", inputs: { teleportOutlet: \"teleportOutlet\" }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.1\", ngImport: i0, type: TeleportOutletDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[teleportOutlet]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: TeleportService }]; }, propDecorators: { teleportOutlet: [{\n                type: Input\n            }] } });\n\nclass TeleportDirective {\n    constructor(tpl, service) {\n        this.tpl = tpl;\n        this.service = service;\n        this.subscription = null;\n    }\n    ngOnChanges(changes) {\n        if (changes.teleportTo && typeof this.teleportTo === 'string') {\n            this.dispose();\n            this.subscription = this.service.outlet$(this.teleportTo).subscribe((outlet) => {\n                if (outlet) {\n                    this.viewRef = outlet.createEmbeddedView(this.tpl);\n                }\n            });\n        }\n    }\n    ngOnDestroy() {\n        this.dispose();\n    }\n    dispose() {\n        this.subscription?.unsubscribe();\n        this.subscription = null;\n        this.viewRef?.destroy();\n    }\n}\nTeleportDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.1\", ngImport: i0, type: TeleportDirective, deps: [{ token: i0.TemplateRef }, { token: TeleportService }], target: i0.ɵɵFactoryTarget.Directive });\nTeleportDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.1.1\", type: TeleportDirective, selector: \"[teleportTo]\", inputs: { teleportTo: \"teleportTo\" }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.1\", ngImport: i0, type: TeleportDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[teleportTo]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: TeleportService }]; }, propDecorators: { teleportTo: [{\n                type: Input\n            }] } });\nclass TeleportModule {\n}\nTeleportModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.1\", ngImport: i0, type: TeleportModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTeleportModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.1.1\", ngImport: i0, type: TeleportModule, declarations: [TeleportDirective, TeleportOutletDirective], exports: [TeleportDirective, TeleportOutletDirective] });\nTeleportModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.1.1\", ngImport: i0, type: TeleportModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.1\", ngImport: i0, type: TeleportModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [TeleportDirective, TeleportOutletDirective],\n                    exports: [TeleportDirective, TeleportOutletDirective],\n                }]\n        }] });\n\nclass CompRef {\n    constructor(options) {\n        this.options = options;\n        if (options.vcr) {\n            this.ref = options.vcr.createComponent(options.component, {\n                index: options.vcr.length,\n                injector: options.injector || options.vcr.injector,\n            });\n        }\n        else {\n            this.ref = createComponent(options.component, {\n                elementInjector: options.injector,\n                environmentInjector: options.environmentInjector\n            });\n            options.appRef.attachView(this.ref.hostView);\n        }\n    }\n    setInput(input, value) {\n        this.ref.instance[input] = value;\n        return this;\n    }\n    setInputs(inputs) {\n        Object.keys(inputs).forEach((input) => {\n            this.ref.instance[input] = inputs[input];\n        });\n        return this;\n    }\n    detectChanges() {\n        this.ref.hostView.detectChanges();\n        return this;\n    }\n    appendTo(container) {\n        container.appendChild(this.getElement());\n        return this;\n    }\n    removeFrom(container) {\n        container.removeChild(this.getElement());\n        return this;\n    }\n    getRawContent() {\n        return this.getElement().outerHTML;\n    }\n    getElement() {\n        return this.ref.location.nativeElement;\n    }\n    destroy() {\n        this.ref.destroy();\n        !this.options.vcr && this.options.appRef.detachView(this.ref.hostView);\n        this.ref = null;\n    }\n}\n\nfunction isTemplateRef(value) {\n    return value instanceof TemplateRef;\n}\nfunction isComponent(value) {\n    return typeof value === 'function';\n}\nfunction isString(value) {\n    return typeof value === 'string';\n}\nfunction getViewRef(value) {\n    return value instanceof CompRef ? value.ref.hostView : value.ref;\n}\n\nclass DynamicViewComponent {\n}\nDynamicViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.1\", ngImport: i0, type: DynamicViewComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nDynamicViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.1.1\", type: DynamicViewComponent, selector: \"dynamic-view\", inputs: { content: \"content\" }, ngImport: i0, template: ` <div [innerHTML]=\"content\"></div> `, isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.1\", ngImport: i0, type: DynamicViewComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'dynamic-view',\n                    template: ` <div [innerHTML]=\"content\"></div> `,\n                }]\n        }], propDecorators: { content: [{\n                type: Input\n            }] } });\n\nclass TplRef {\n    constructor(args) {\n        this.args = args;\n        if (this.args.vcr) {\n            this.ref = this.args.vcr.createEmbeddedView(this.args.tpl, this.args.context || {}, { injector: args.injector });\n            this.ref.detectChanges();\n        }\n        else {\n            this.ref = this.args.tpl.createEmbeddedView(this.args.context || {}, args.injector);\n            this.ref.detectChanges();\n            this.args.appRef.attachView(this.ref);\n        }\n    }\n    detectChanges() {\n        this.ref.detectChanges();\n    }\n    getElement() {\n        const rootNodes = this.ref.rootNodes;\n        if (rootNodes.length === 1 && rootNodes[0] === Node.ELEMENT_NODE) {\n            this.element = rootNodes[0];\n        }\n        else {\n            this.element = document.createElement('div');\n            this.element.append(...rootNodes);\n        }\n        return this.element;\n    }\n    destroy() {\n        if (this.ref.rootNodes[0] !== 1) {\n            this.element?.parentNode.removeChild(this.element);\n            this.element = null;\n        }\n        if (!this.args.vcr) {\n            this.args.appRef.detachView(this.ref);\n        }\n        this.ref.destroy();\n        this.ref = null;\n    }\n}\n\nclass StringRef {\n    constructor(value) {\n        this.value = value;\n    }\n    getElement() {\n        return this.value;\n    }\n    detectChanges() { }\n    destroy() { }\n}\n\nconst VIEW_CONTEXT = new InjectionToken('Component context');\nclass ViewService {\n    constructor() {\n        this.injector = inject(Injector);\n        this.appRef = inject(ApplicationRef);\n        this.environmentInjector = inject(EnvironmentInjector);\n    }\n    createComponent(component, options = {}) {\n        let injector = options.injector || this.injector;\n        if (options.context) {\n            injector = Injector.create({\n                providers: [{\n                        provide: VIEW_CONTEXT,\n                        useValue: options.context\n                    }],\n                parent: injector\n            });\n        }\n        return new CompRef({\n            component,\n            vcr: options.vcr,\n            injector,\n            appRef: this.appRef,\n            environmentInjector: options.environmentInjector || this.environmentInjector\n        });\n    }\n    createTemplate(tpl, options = {}) {\n        return new TplRef({\n            vcr: options.vcr,\n            appRef: this.appRef,\n            tpl,\n            context: options.context,\n            injector: options.injector\n        });\n    }\n    createView(content, viewOptions = {}) {\n        if (isTemplateRef(content)) {\n            return this.createTemplate(content, viewOptions);\n        }\n        else if (isComponent(content)) {\n            return this.createComponent(content, viewOptions);\n        }\n        else if (isString(content)) {\n            return new StringRef(content);\n        }\n        else {\n            throw 'Type of content is not supported';\n        }\n    }\n}\nViewService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.1\", ngImport: i0, type: ViewService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nViewService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.1.1\", ngImport: i0, type: ViewService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.1\", ngImport: i0, type: ViewService, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\nfunction injectViewContext() {\n    return inject(VIEW_CONTEXT);\n}\n\nclass DynamicViewDirective {\n    constructor(defaultTpl, vcr, viewService) {\n        this.defaultTpl = defaultTpl;\n        this.vcr = vcr;\n        this.viewService = viewService;\n    }\n    ngOnInit() {\n        this.resolveContentType();\n    }\n    ngOnChanges(changes) {\n        if (changes.view && !changes.view.isFirstChange()) {\n            this.resolveContentType();\n        }\n    }\n    resolveContentType() {\n        this.viewRef?.destroy();\n        if (isString(this.view)) {\n            this.viewRef = this.viewService.createComponent(DynamicViewComponent, {\n                vcr: this.vcr,\n                injector: this.injector,\n            });\n            this.viewRef.setInput('content', this.view).detectChanges();\n        }\n        else {\n            this.viewRef = this.viewService.createView(this.view || this.defaultTpl, {\n                vcr: this.vcr,\n                injector: this.injector ?? this.vcr.injector,\n                context: this.context,\n            });\n        }\n    }\n    ngOnDestroy() {\n        this.viewRef?.destroy();\n    }\n}\nDynamicViewDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.1\", ngImport: i0, type: DynamicViewDirective, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: ViewService }], target: i0.ɵɵFactoryTarget.Directive });\nDynamicViewDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.1.1\", type: DynamicViewDirective, selector: \"[dynamicView]\", inputs: { view: [\"dynamicView\", \"view\"], injector: [\"dynamicViewInjector\", \"injector\"], context: [\"dynamicViewContext\", \"context\"] }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.1\", ngImport: i0, type: DynamicViewDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[dynamicView]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: ViewService }]; }, propDecorators: { view: [{\n                type: Input,\n                args: ['dynamicView']\n            }], injector: [{\n                type: Input,\n                args: ['dynamicViewInjector']\n            }], context: [{\n                type: Input,\n                args: ['dynamicViewContext']\n            }] } });\nclass DynamicViewModule {\n}\nDynamicViewModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.1\", ngImport: i0, type: DynamicViewModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nDynamicViewModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.1.1\", ngImport: i0, type: DynamicViewModule, declarations: [DynamicViewDirective, DynamicViewComponent], exports: [DynamicViewDirective] });\nDynamicViewModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.1.1\", ngImport: i0, type: DynamicViewModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.1\", ngImport: i0, type: DynamicViewModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [DynamicViewDirective, DynamicViewComponent],\n                    exports: [DynamicViewDirective],\n                }]\n        }] });\n\n/*\n * Public API Surface of overview\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CompRef, DynamicViewDirective, DynamicViewModule, StringRef, TeleportDirective, TeleportModule, TeleportOutletDirective, TplRef, ViewService, getViewRef, injectViewContext, isComponent, isString, isTemplateRef };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}